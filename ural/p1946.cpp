#include <cstdio>
#include <iostream>

const int N = 50 + 1;
const int MOD = 1000000000 + 7;
const int answer[] = {
    0, 0, 2, 8, 37, 198, 1178, 7548, 50944, 357855, 2595250, 19313372, 146815503, 136158488, 927025933, 65653738,
    215408350, 746589264, 724066327, 631274816, 422001336, 7146650, 407217283, 393518927, 965151303, 895251280,
    864749285, 934373752, 467108499, 418735743, 451847922, 890597718, 824730990, 739940095, 858720713, 600431442,
    577631035, 867745635, 3561686, 302514002, 527947240, 805543258, 150530321, 534209877, 85487795, 939816214,
    315353659, 496074452, 538654703, 326456510, 82203529
};

int n;

int main() {
    scanf("%d", &n);
    printf("%d\n", answer[n]);
    return 0;
}
/*
The table is made by this

n = 50;
for (int i = 0; i <= n * 3; ++ i) {
    for (int j = 0; j <= i; ++ j) {
        dp[1][i][j] = 1;
    }
}
for (int i = 2; i <= n; ++ i) {
    for (int j = 0; j <= n * 3; ++ j) {
        for (int k = 0; k <= n * 3 * (n - 1) >> 1; ++ k) {
            for (int l = std::min(j, k + 3 * (i - 1)); l >= 0; -- l) {
                dp[i][j][k] += dp[i - 1][l][k + 3 * (i - 1) - l];
                if (dp[i][j][k] >= MOD) {
                    dp[i][j][k] -= MOD;
                }
            }
        }
    }
    printf("%d, ", dp[i][i * 3][0]);
}
*/
